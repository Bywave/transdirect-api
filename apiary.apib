FORMAT: X-1A
HOST: https://api.transdirect.com.au/

# Transdirect Public API V3

This is a WIP API for Transdirect.

Authentication is via HTTP basic authentication. API is only accessible via HTTPS.

Error codes: 200 201 304 400 401 403 404 415 500

Formats: JSON only including input - 415 error on invalid content types.

# Group Locations
A location is a unique post_code/suburb combination. A suburb might have multiple locations with different post_codes and similarly a post_code will have many locations for each suburb within the post_code.


# Group Bookings
Get a quick quote, this will return a booking id that can be further updated with sender, receiver and other shipping options

# Booking [/bookings{?since,order_by,order}]

## Create a booking or get a quick quote [POST]
At a minimum the body must contain the fields below. Following creation you can update the booking from the returned booking id by using the PUT or PATCH methods.

The `country` field in `from`/`to` is set to "AU" by default.

+ Request (application/json)

    + Body 
        
        ```js
        {
            "insurance_value" : 10000,
            "items": [
                {
                    "weight": 100,
                    "height": 100,
                    "width": 100,
                    "depth": 100,
                    "quantity": 1,
                    "unit": "pallet"
                },
                {
                    "weight": 10,
                    "height": 10,
                    "width": 10,
                    "depth": 10,
                    "quantity": 5,
                    "unit": "carton"
                }  
            ],
            "sender": {
                "country" : "AU",
                "post_code": "2000",
                "type": "residential"
            },
            "receiver": {
                "country" : "AU",
                "post_code": "3000",
                "type": "business"
            },
            "dangerous_goods": false
        }
        ```

+ Response 201 (application/json)

    + Headers  
    
        ```
        Location: /bookings/232456
        ```
    
    + Body 
        
        ```js
        {
            "id" : 232456,
            "dangerous_goods" : false,
            "items" : [
                {
                    "id" : 523456,
                    "weight" : 100,
                    "height" : 100,
                    "width" : 100,
                    "depth" : 100,
                    "quantity" : 1,
                    "unit" : "pallet"
                },
                {
                    "id" : 523459,
                    "weight" : 10,
                    "height" : 10,
                    "width" : 10,
                    "depth" : 10,
                    "quantity" : 5,
                    "unit" : "carton"
                }  
            ],
            "notifications": {
                "email": true,
                "sms": false
            },
            "sender": {
                "country" : "AU",
                "post_code": "2000",
                "type": "residential"
            },
            "receiver": {
                "country" : "AU",
                "post_code": "3000",
                "type": "business"
            },
            "quotes": {
                "toll" : 47.87,
                "allied" : 56.97,
                "couriersplease" : 53.65
            },
            "payment": {
                "status": "unpaid"
            },
            "status" : "quoted",
            "created_at" : "2013-10-26T18:24:02Z",
            "updated_at" : "2013-10-26T18:24:02Z"
        }
        ```


## Get all your bookings [GET]

+ Parameters

    + since (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only bookings created at or after this time are returned.
    + order_by (optional, string) ... The sort order of the bookings returned. Default is `created_at`, options are `price`, `updated_at`
    + order (optional, string) ... Order direction. Default is `desc`, other value is `asc`.
    
+ Response 201 (application/json)

    + Body 
        
        ```js
        {
            fill in this later with array of bookings...
        }
        ```
    
# Booking [/bookings/{id}]
Notes: Do we want to use UTC? Do we want receipt code in response?
Statuses: quoted, booked, paid, confirmed, shipped, rejected

+ Model (application/json)

    JSON representation of Booking Resource.

    + Headers

            Link: <http:/api.gistfox.com/gists/42/star>;rel="self"

    + Body

        ```js
        {
            "id" : 232456,
            "booked_at" : "2013-10-26T18:28:02Z",
            "booked_by" : "receiver",
            "connote" : 1258993,
            "charged_weight" : 22.5958,
            "created_at" : "2013-10-26T18:24:02Z",
            "dangerous_goods" : false,
            "description" : "Timber Tv unit",            
            "items" : [
                {
                    "id" : 523456,
                    "weight" : 100,
                    "height" : 100,
                    "width" : 100,
                    "depth" : 100,
                    "quantity" : 1,
                    "unit" : "pallet"
                },
                {
                    "id" : 523459,
                    "weight" : 10,
                    "height" : 10,
                    "width" : 10,
                    "depth" : 10,
                    "quantity" : 5,
                    "unit" : "carton"
                }  
            ],
            "label" : {
                "html" : "https://api.transdirect.com.au/bookings/232456/label.html",
                "pdf" : "https://api.transdirect.com.au/bookings/232456/label.pdf"
            },
            "notifications": {
                "email": true,
                "sms": false
            },
            "payment": {
                "status": "paid",
                "receipt" : "6TU89567LC691552C"
            },
            "pickup_window" : {
                "start" : "2013-13-26T13:00:00Z"
                "end" : "2013-13-26T17:00:00Z"
            },
            "quotes": {
                "toll" : 47.87,
                "allied" : 56.97,
                "couriersplease" : 53.65
            },
            "receiver": {
                "id" : 123456,
                "address" : "1 Main Street",
                "country" : "AU",
                "email" : "test1@example.com",
                "name" : "Test User",
                "phone" : "0400 000 000",
                "post_code": "3000",
                "state" : "VIC",
                "suburb" : "MELBOURNE",
                "type": "business"
            },
            "scanned_weight" : 23,
            "sender": {
                "id" : 123455,
                "address" : "1 Main Street",
                "country" : "AU",
                "email" : "test1@example.com",
                "name" : "Test User",
                "phone" : "0400 000 000",
                "post_code": "2000",
                "state" : "NSW",
                "suburb" : "SYDNEY",
                "type": "residential"
            },
            "special_instructions" : "FRAGILE If delivery unattended, call Transdirect on 1300 668 229 to arrange redelivery details."
            "status" : "confirmed",
            "updated_at" : "2013-10-26T18:24:02Z"
        }
        ```        

## Get a single booking [GET]
+ Response 200

    [Booking][]
    
## Update a booking [PUT]
+ Response 200

    [Booking][]

## Partially update a booking [PATCH]
+ Response 200

    [Booking][]

# Booking Item [/bookings/{id}/items]



## Get all items in a booking [GET]

+ Response 200 (application/json)
 
   ```js
    [
        {
            "weight": 100,
            "height": 100,
            "width": 100,
            "depth": 100,
            "quantity": 1,
            "unit": "pallet"
        },
        {
            "weight": 10,
            "height": 10,
            "width": 10,
            "depth": 10,
            "quantity": 5,
            "unit": "carton"
        }  
    ]
    ```
    

## Add an item to a booking [POST]
Todo: do we need an id in the response?

+ Response 201 (application/json)
 
    + Headers  
    
        ```
        Location: /bookings/{bookingId}/item/{itemId}
        ```
    
    + Body 
    
       ```js
        {
            "weight": 20,
            "height": 30,
            "width": 10,
            "depth": 10,
            "quantity": 5,
            "unit": "carton"
        }
        ```


# Booking Items [/bookings/{id}/label]

## GET /bookings/{id}/label
Get the PDF label for a booking

+ Response 200 (application/pdf)
 
    + Headers  
    
        ```
        Location: /bookings/{bookingId}/item/{itemId}
        ```
    
    + Body 
    
       ```js
        {
            "weight": 20,
            "height": 30,
            "width": 10,
            "depth": 10,
            "quantity": 5,
            "unit": "carton"
        }
        ```

+ Response 201 (application/pdf)


## PUT /bookings/{bookingId}/payment
Pay for a booking - fields TBC


-- Members Resources --

Get the current member - should return full account info (balance etc)
GET /member
> Accept: application/json
< 200
< Content-Type: application/json
{
    "member": {
        "name": "John Smith",
        "company": "Test Company",
        "email": "john@example.com",
        "address": "",
        "suburb": "",
        "post_code": "",
        "state": "NSW",
        "phone": "02 9999 9999",
        "discountFactor": 0.05,
        "creditLimit": 5000,
        "creditLimitAvailable": 4355.34,
        "chargeType": "invoice",
        "terms": 30,
        "active": true
    },
    "meta": {
        "code": 200
    }
}

Get a members bookings
GET /members/{memberId}/bookings{?limit,offset,orderBy}
> Accept: application/json
< 200
< Content-Type: application/json
[]

Get a members address book
GET /members/{memberId}/addresses{?limit,offset,orderBy}
> Accept: application/json
< 200
< Content-Type: application/json
{
    "addresses": [
        {
            "id": 65543,
            "address": "10 Test Street",
            "suburb": "Darlinghurst",
            "state": "NSW",
            "post_code": "2010"
        },
        {
            "id": 66643,
            "address": "20 Test Street",
            "suburb": "Darlinghurst",
            "state": "NSW",
            "post_code": "2010"
        }
    ],
    "links": {},
    "meta": {}
}

Create a new entry in the members address book
POST /members/{memberId}/addresses
> Accept: application/json
< 201
< Content-Type: application/json
< Location: /members/{memberId}/addresses/{addressId}
[]

Get a single address from address book
GET /members/{memberId}/addresses/{addressId}
> Accept: application/json
< 200
< Content-Type: application/json
{
    "address": {
        "id": 65543,
        "address": "10 Test Street",
        "suburb": "Darlinghurst",
        "state": "NSW",
        "post_code": "2010"
    },
    "meta": {}
}

Get monthly statements
GET /members/{memberId}/statements{?limit,offset,orderBy}
> Accept: application/json
< 200
< Content-Type: application/json
[]

Get single monthly statement
GET /members/{memberId}/statements/{statementId}
> Accept: application/json
< 200
< Content-Type: application/json
[]

-- Locations Resources --

Get all locations.
GET /locations
> Accept: application/json
< 200
< Content-Type: application/json
{
    "locations": [
        {
            "locality": "SYDNEY",
            "pcode": "1001",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY",
            "pcode": "1002",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY",
            "pcode": "1003",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY",
            "pcode": "1004",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY",
            "pcode": "1005",
            "state": "NSW"
        }
    ],
    "links": {
        "first": "http://api.transdirect.com.au/locations?page=1",
        "previous": "http://api.transdirect.com.au/locations?page=1",
        "next": "http://api.transdirect.com.au/locations?page=3",
        "last": "http://api.transdirect.com.au/locations?page=123"
    },
    "meta": {
        "count": 20123,
        "code": 200,
        "message": ""
    }
}

Search all locations.
GET /locations{?searchTerm}
> Accept: application/json
< 200
< Content-Type: application/json
{
    "locations": [
        {
            "locality": "SYDNEY",
            "pcode": "1001",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY",
            "pcode": "1002",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY",
            "pcode": "1003",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY",
            "pcode": "1004",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY",
            "pcode": "1005",
            "state": "NSW"
        }
    ],
    "links": {},
    "meta": {
        "count": 5,
        "limit": 10,
        "offset": 0,
        "query": "sydn",
        "code": 200,
        "message": ""
    }
}

Get all locations available. Please note this data is for use in typeaheads etc and may not be 100% accurate for all 
couriers as each has their own post_code and suburb data.
GET /locations/post_code/{post_code}
> Accept: application/json
< 200
< Content-Type: application/json
{
    "locations": [
        {
            "locality": "BARANGAROO",
            "pcode": "2000",
            "state": "NSW"
        },
        {
            "locality": "DAWES POINT",
            "pcode": "2000",
            "state": "NSW"
        },
        {
            "locality": "HAYMARKET",
            "pcode": "2000",
            "state": "NSW"
        },
        {
            "locality": "MILLERS POINT",
            "pcode": "2000",
            "state": "NSW"
        },
        {
            "locality": "PARLIAMENT HOUSE",
            "pcode": "2000",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY",
            "pcode": "2000",
            "state": "NSW"
        },
        {
            "locality": "SYDNEY SOUTH",
            "pcode": "2000",
            "state": "NSW"
        },
        {
            "locality": "THE ROCKS",
            "pcode": "2000",
            "state": "NSW"
        }
    ],
    "meta": {
        "count": 8,
        "code": 200,
        "post_code": "2000"
    }
}


